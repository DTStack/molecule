(self["webpackJsonp"] = self["webpackJsonp"] || []).push([[63],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/swift/swift.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*!---------------------------------------------------------------------------------------------\n *  Copyright (C) David Owens II, owensd.io. All rights reserved.\n *--------------------------------------------------------------------------------------------*/\nvar conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n        { open: '`', close: '`' }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n        { open: '`', close: '`' }\n    ]\n};\nvar language = {\n    defaultToken: '',\n    tokenPostfix: '.swift',\n    // TODO(owensd): Support the full range of unicode valid identifiers.\n    identifier: /[a-zA-Z_][\\w$]*/,\n    // TODO(owensd): Support the @availability macro properly.\n    attributes: [\n        '@autoclosure',\n        '@noescape',\n        '@noreturn',\n        '@NSApplicationMain',\n        '@NSCopying',\n        '@NSManaged',\n        '@objc',\n        '@UIApplicationMain',\n        '@noreturn',\n        '@availability',\n        '@IBAction',\n        '@IBDesignable',\n        '@IBInspectable',\n        '@IBOutlet'\n    ],\n    accessmodifiers: ['public', 'private', 'internal'],\n    keywords: [\n        '__COLUMN__',\n        '__FILE__',\n        '__FUNCTION__',\n        '__LINE__',\n        'as',\n        'as!',\n        'as?',\n        'associativity',\n        'break',\n        'case',\n        'catch',\n        'class',\n        'continue',\n        'convenience',\n        'default',\n        'deinit',\n        'didSet',\n        'do',\n        'dynamic',\n        'dynamicType',\n        'else',\n        'enum',\n        'extension',\n        'fallthrough',\n        'final',\n        'for',\n        'func',\n        'get',\n        'guard',\n        'if',\n        'import',\n        'in',\n        'infix',\n        'init',\n        'inout',\n        'internal',\n        'is',\n        'lazy',\n        'left',\n        'let',\n        'mutating',\n        'nil',\n        'none',\n        'nonmutating',\n        'operator',\n        'optional',\n        'override',\n        'postfix',\n        'precedence',\n        'prefix',\n        'private',\n        'protocol',\n        'Protocol',\n        'public',\n        'repeat',\n        'required',\n        'return',\n        'right',\n        'self',\n        'Self',\n        'set',\n        'static',\n        'struct',\n        'subscript',\n        'super',\n        'switch',\n        'throw',\n        'throws',\n        'try',\n        'try!',\n        'Type',\n        'typealias',\n        'unowned',\n        'var',\n        'weak',\n        'where',\n        'while',\n        'willSet',\n        'FALSE',\n        'TRUE'\n    ],\n    symbols: /[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,\n    // Moved . to operatorstart so it can be a delimiter\n    operatorstart: /[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,\n    operatorend: /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,\n    operators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,\n    // TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            { include: '@attribute' },\n            { include: '@literal' },\n            { include: '@keyword' },\n            { include: '@invokedmethod' },\n            { include: '@symbol' }\n        ],\n        whitespace: [\n            [/\\s+/, 'white'],\n            [/\"\"\"/, 'string.quote', '@endDblDocString']\n        ],\n        endDblDocString: [\n            [/[^\"]+/, 'string'],\n            [/\\\\\"/, 'string'],\n            [/\"\"\"/, 'string.quote', '@popall'],\n            [/\"/, 'string']\n        ],\n        symbol: [\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/[.]/, 'delimiter'],\n            [/@operators/, 'operator'],\n            [/@symbols/, 'operator']\n        ],\n        comment: [\n            [/\\/\\/\\/.*$/, 'comment.doc'],\n            [/\\/\\*\\*/, 'comment.doc', '@commentdocbody'],\n            [/\\/\\/.*$/, 'comment'],\n            [/\\/\\*/, 'comment', '@commentbody']\n        ],\n        commentdocbody: [\n            [/\\/\\*/, 'comment', '@commentbody'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/\\:[a-zA-Z]+\\:/, 'comment.doc.param'],\n            [/./, 'comment.doc']\n        ],\n        commentbody: [\n            [/\\/\\*/, 'comment', '@commentbody'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/./, 'comment']\n        ],\n        attribute: [\n            [\n                /\\@@identifier/,\n                {\n                    cases: {\n                        '@attributes': 'keyword.control',\n                        '@default': ''\n                    }\n                }\n            ]\n        ],\n        literal: [\n            [/\"/, { token: 'string.quote', next: '@stringlit' }],\n            [/0[b]([01]_?)+/, 'number.binary'],\n            [/0[o]([0-7]_?)+/, 'number.octal'],\n            [/0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/, 'number.hex'],\n            [/(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/, 'number.float'],\n            [/(\\d_?)+/, 'number']\n        ],\n        stringlit: [\n            [/\\\\\\(/, { token: 'operator', next: '@interpolatedexpression' }],\n            [/@escapes/, 'string'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', next: '@pop' }],\n            [/./, 'string']\n        ],\n        interpolatedexpression: [\n            [/\\(/, { token: 'operator', next: '@interpolatedexpression' }],\n            [/\\)/, { token: 'operator', next: '@pop' }],\n            { include: '@literal' },\n            { include: '@keyword' },\n            { include: '@symbol' }\n        ],\n        keyword: [\n            [/`/, { token: 'operator', next: '@escapedkeyword' }],\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '[A-Z][a-zA-Z0-9$]*': 'type.identifier',\n                        '@default': 'identifier'\n                    }\n                }\n            ]\n        ],\n        escapedkeyword: [\n            [/`/, { token: 'operator', next: '@pop' }],\n            [/./, 'identifier']\n        ],\n        //\t\tsymbol: [\n        //\t\t\t[ /@symbols/, 'operator' ],\n        //\t\t\t[ /@operators/, 'operator' ]\n        //\t\t],\n        invokedmethod: [\n            [\n                /([.])(@identifier)/,\n                {\n                    cases: {\n                        $2: ['delimeter', 'type.identifier'],\n                        '@default': ''\n                    }\n                }\n            ]\n        ]\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL3N3aWZ0L3N3aWZ0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2ljLWxhbmd1YWdlcy9zd2lmdC9zd2lmdC5qcz9kMzlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoQykgRGF2aWQgT3dlbnMgSUksIG93ZW5zZC5pby4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IHZhciBjb25mID0ge1xuICAgIGNvbW1lbnRzOiB7XG4gICAgICAgIGxpbmVDb21tZW50OiAnLy8nLFxuICAgICAgICBibG9ja0NvbW1lbnQ6IFsnLyonLCAnKi8nXVxuICAgIH0sXG4gICAgYnJhY2tldHM6IFtcbiAgICAgICAgWyd7JywgJ30nXSxcbiAgICAgICAgWydbJywgJ10nXSxcbiAgICAgICAgWycoJywgJyknXVxuICAgIF0sXG4gICAgYXV0b0Nsb3NpbmdQYWlyczogW1xuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxuICAgICAgICB7IG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxuICAgICAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9LFxuICAgICAgICB7IG9wZW46ICdgJywgY2xvc2U6ICdgJyB9XG4gICAgXSxcbiAgICBzdXJyb3VuZGluZ1BhaXJzOiBbXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXG4gICAgICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicgfSxcbiAgICAgICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiIH0sXG4gICAgICAgIHsgb3BlbjogJ2AnLCBjbG9zZTogJ2AnIH1cbiAgICBdXG59O1xuZXhwb3J0IHZhciBsYW5ndWFnZSA9IHtcbiAgICBkZWZhdWx0VG9rZW46ICcnLFxuICAgIHRva2VuUG9zdGZpeDogJy5zd2lmdCcsXG4gICAgLy8gVE9ETyhvd2Vuc2QpOiBTdXBwb3J0IHRoZSBmdWxsIHJhbmdlIG9mIHVuaWNvZGUgdmFsaWQgaWRlbnRpZmllcnMuXG4gICAgaWRlbnRpZmllcjogL1thLXpBLVpfXVtcXHckXSovLFxuICAgIC8vIFRPRE8ob3dlbnNkKTogU3VwcG9ydCB0aGUgQGF2YWlsYWJpbGl0eSBtYWNybyBwcm9wZXJseS5cbiAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICdAYXV0b2Nsb3N1cmUnLFxuICAgICAgICAnQG5vZXNjYXBlJyxcbiAgICAgICAgJ0Bub3JldHVybicsXG4gICAgICAgICdATlNBcHBsaWNhdGlvbk1haW4nLFxuICAgICAgICAnQE5TQ29weWluZycsXG4gICAgICAgICdATlNNYW5hZ2VkJyxcbiAgICAgICAgJ0BvYmpjJyxcbiAgICAgICAgJ0BVSUFwcGxpY2F0aW9uTWFpbicsXG4gICAgICAgICdAbm9yZXR1cm4nLFxuICAgICAgICAnQGF2YWlsYWJpbGl0eScsXG4gICAgICAgICdASUJBY3Rpb24nLFxuICAgICAgICAnQElCRGVzaWduYWJsZScsXG4gICAgICAgICdASUJJbnNwZWN0YWJsZScsXG4gICAgICAgICdASUJPdXRsZXQnXG4gICAgXSxcbiAgICBhY2Nlc3Ntb2RpZmllcnM6IFsncHVibGljJywgJ3ByaXZhdGUnLCAnaW50ZXJuYWwnXSxcbiAgICBrZXl3b3JkczogW1xuICAgICAgICAnX19DT0xVTU5fXycsXG4gICAgICAgICdfX0ZJTEVfXycsXG4gICAgICAgICdfX0ZVTkNUSU9OX18nLFxuICAgICAgICAnX19MSU5FX18nLFxuICAgICAgICAnYXMnLFxuICAgICAgICAnYXMhJyxcbiAgICAgICAgJ2FzPycsXG4gICAgICAgICdhc3NvY2lhdGl2aXR5JyxcbiAgICAgICAgJ2JyZWFrJyxcbiAgICAgICAgJ2Nhc2UnLFxuICAgICAgICAnY2F0Y2gnLFxuICAgICAgICAnY2xhc3MnLFxuICAgICAgICAnY29udGludWUnLFxuICAgICAgICAnY29udmVuaWVuY2UnLFxuICAgICAgICAnZGVmYXVsdCcsXG4gICAgICAgICdkZWluaXQnLFxuICAgICAgICAnZGlkU2V0JyxcbiAgICAgICAgJ2RvJyxcbiAgICAgICAgJ2R5bmFtaWMnLFxuICAgICAgICAnZHluYW1pY1R5cGUnLFxuICAgICAgICAnZWxzZScsXG4gICAgICAgICdlbnVtJyxcbiAgICAgICAgJ2V4dGVuc2lvbicsXG4gICAgICAgICdmYWxsdGhyb3VnaCcsXG4gICAgICAgICdmaW5hbCcsXG4gICAgICAgICdmb3InLFxuICAgICAgICAnZnVuYycsXG4gICAgICAgICdnZXQnLFxuICAgICAgICAnZ3VhcmQnLFxuICAgICAgICAnaWYnLFxuICAgICAgICAnaW1wb3J0JyxcbiAgICAgICAgJ2luJyxcbiAgICAgICAgJ2luZml4JyxcbiAgICAgICAgJ2luaXQnLFxuICAgICAgICAnaW5vdXQnLFxuICAgICAgICAnaW50ZXJuYWwnLFxuICAgICAgICAnaXMnLFxuICAgICAgICAnbGF6eScsXG4gICAgICAgICdsZWZ0JyxcbiAgICAgICAgJ2xldCcsXG4gICAgICAgICdtdXRhdGluZycsXG4gICAgICAgICduaWwnLFxuICAgICAgICAnbm9uZScsXG4gICAgICAgICdub25tdXRhdGluZycsXG4gICAgICAgICdvcGVyYXRvcicsXG4gICAgICAgICdvcHRpb25hbCcsXG4gICAgICAgICdvdmVycmlkZScsXG4gICAgICAgICdwb3N0Zml4JyxcbiAgICAgICAgJ3ByZWNlZGVuY2UnLFxuICAgICAgICAncHJlZml4JyxcbiAgICAgICAgJ3ByaXZhdGUnLFxuICAgICAgICAncHJvdG9jb2wnLFxuICAgICAgICAnUHJvdG9jb2wnLFxuICAgICAgICAncHVibGljJyxcbiAgICAgICAgJ3JlcGVhdCcsXG4gICAgICAgICdyZXF1aXJlZCcsXG4gICAgICAgICdyZXR1cm4nLFxuICAgICAgICAncmlnaHQnLFxuICAgICAgICAnc2VsZicsXG4gICAgICAgICdTZWxmJyxcbiAgICAgICAgJ3NldCcsXG4gICAgICAgICdzdGF0aWMnLFxuICAgICAgICAnc3RydWN0JyxcbiAgICAgICAgJ3N1YnNjcmlwdCcsXG4gICAgICAgICdzdXBlcicsXG4gICAgICAgICdzd2l0Y2gnLFxuICAgICAgICAndGhyb3cnLFxuICAgICAgICAndGhyb3dzJyxcbiAgICAgICAgJ3RyeScsXG4gICAgICAgICd0cnkhJyxcbiAgICAgICAgJ1R5cGUnLFxuICAgICAgICAndHlwZWFsaWFzJyxcbiAgICAgICAgJ3Vub3duZWQnLFxuICAgICAgICAndmFyJyxcbiAgICAgICAgJ3dlYWsnLFxuICAgICAgICAnd2hlcmUnLFxuICAgICAgICAnd2hpbGUnLFxuICAgICAgICAnd2lsbFNldCcsXG4gICAgICAgICdGQUxTRScsXG4gICAgICAgICdUUlVFJ1xuICAgIF0sXG4gICAgc3ltYm9sczogL1s9KCl7fVxcW1xcXS4sOjtAI1xcXyZcXC08PmA/ISsqXFxcXFxcL10vLFxuICAgIC8vIE1vdmVkIC4gdG8gb3BlcmF0b3JzdGFydCBzbyBpdCBjYW4gYmUgYSBkZWxpbWl0ZXJcbiAgICBvcGVyYXRvcnN0YXJ0OiAvW1xcLz1cXC0rISolPD4mfF5+P1xcdTAwQTEtXFx1MDBBN1xcdTAwQTlcXHUwMEFCXFx1MDBBQ1xcdTAwQUVcXHUwMEIwLVxcdTAwQjFcXHUwMEI2XFx1MDBCQlxcdTAwQkZcXHUwMEQ3XFx1MDBGN1xcdTIwMTYtXFx1MjAxN1xcdTIwMjAtXFx1MjAyN1xcdTIwMzAtXFx1MjAzRVxcdTIwNDEtXFx1MjA1M1xcdTIwNTUtXFx1MjA1RVxcdTIxOTAtXFx1MjNGRlxcdTI1MDAtXFx1Mjc3NVxcdTI3OTQtXFx1MkJGRlxcdTJFMDAtXFx1MkU3RlxcdTMwMDEtXFx1MzAwM1xcdTMwMDgtXFx1MzAzMF0vLFxuICAgIG9wZXJhdG9yZW5kOiAvW1xcdTAzMDAtXFx1MDM2RlxcdTFEQzAtXFx1MURGRlxcdTIwRDAtXFx1MjBGRlxcdUZFMDAtXFx1RkUwRlxcdUZFMjAtXFx1RkUyRlxcdUUwMTAwLVxcdUUwMUVGXS8sXG4gICAgb3BlcmF0b3JzOiAvKEBvcGVyYXRvcnN0YXJ0KSgoQG9wZXJhdG9yc3RhcnQpfChAb3BlcmF0b3JlbmQpKSovLFxuICAgIC8vIFRPRE8ob3dlbnNkKTogVGhlc2UgYXJlIGJvcnJvd2VkIGZyb20gQyM7IG5lZWQgdG8gdmFsaWRhdGUgY29ycmVjdG5lc3MgZm9yIFN3aWZ0LlxuICAgIGVzY2FwZXM6IC9cXFxcKD86W2FiZm5ydHZcXFxcXCInXXx4WzAtOUEtRmEtZl17MSw0fXx1WzAtOUEtRmEtZl17NH18VVswLTlBLUZhLWZdezh9KS8sXG4gICAgdG9rZW5pemVyOiB7XG4gICAgICAgIHJvb3Q6IFtcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0B3aGl0ZXNwYWNlJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGNvbW1lbnQnIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAYXR0cmlidXRlJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGxpdGVyYWwnIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAa2V5d29yZCcgfSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BpbnZva2VkbWV0aG9kJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHN5bWJvbCcgfVxuICAgICAgICBdLFxuICAgICAgICB3aGl0ZXNwYWNlOiBbXG4gICAgICAgICAgICBbL1xccysvLCAnd2hpdGUnXSxcbiAgICAgICAgICAgIFsvXCJcIlwiLywgJ3N0cmluZy5xdW90ZScsICdAZW5kRGJsRG9jU3RyaW5nJ11cbiAgICAgICAgXSxcbiAgICAgICAgZW5kRGJsRG9jU3RyaW5nOiBbXG4gICAgICAgICAgICBbL1teXCJdKy8sICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFsvXFxcXFwiLywgJ3N0cmluZyddLFxuICAgICAgICAgICAgWy9cIlwiXCIvLCAnc3RyaW5nLnF1b3RlJywgJ0Bwb3BhbGwnXSxcbiAgICAgICAgICAgIFsvXCIvLCAnc3RyaW5nJ11cbiAgICAgICAgXSxcbiAgICAgICAgc3ltYm9sOiBbXG4gICAgICAgICAgICBbL1t7fSgpXFxbXFxdXS8sICdAYnJhY2tldHMnXSxcbiAgICAgICAgICAgIFsvWzw+XSg/IUBzeW1ib2xzKS8sICdAYnJhY2tldHMnXSxcbiAgICAgICAgICAgIFsvWy5dLywgJ2RlbGltaXRlciddLFxuICAgICAgICAgICAgWy9Ab3BlcmF0b3JzLywgJ29wZXJhdG9yJ10sXG4gICAgICAgICAgICBbL0BzeW1ib2xzLywgJ29wZXJhdG9yJ11cbiAgICAgICAgXSxcbiAgICAgICAgY29tbWVudDogW1xuICAgICAgICAgICAgWy9cXC9cXC9cXC8uKiQvLCAnY29tbWVudC5kb2MnXSxcbiAgICAgICAgICAgIFsvXFwvXFwqXFwqLywgJ2NvbW1lbnQuZG9jJywgJ0Bjb21tZW50ZG9jYm9keSddLFxuICAgICAgICAgICAgWy9cXC9cXC8uKiQvLCAnY29tbWVudCddLFxuICAgICAgICAgICAgWy9cXC9cXCovLCAnY29tbWVudCcsICdAY29tbWVudGJvZHknXVxuICAgICAgICBdLFxuICAgICAgICBjb21tZW50ZG9jYm9keTogW1xuICAgICAgICAgICAgWy9cXC9cXCovLCAnY29tbWVudCcsICdAY29tbWVudGJvZHknXSxcbiAgICAgICAgICAgIFsvXFwqXFwvLywgJ2NvbW1lbnQuZG9jJywgJ0Bwb3AnXSxcbiAgICAgICAgICAgIFsvXFw6W2EtekEtWl0rXFw6LywgJ2NvbW1lbnQuZG9jLnBhcmFtJ10sXG4gICAgICAgICAgICBbLy4vLCAnY29tbWVudC5kb2MnXVxuICAgICAgICBdLFxuICAgICAgICBjb21tZW50Ym9keTogW1xuICAgICAgICAgICAgWy9cXC9cXCovLCAnY29tbWVudCcsICdAY29tbWVudGJvZHknXSxcbiAgICAgICAgICAgIFsvXFwqXFwvLywgJ2NvbW1lbnQnLCAnQHBvcCddLFxuICAgICAgICAgICAgWy8uLywgJ2NvbW1lbnQnXVxuICAgICAgICBdLFxuICAgICAgICBhdHRyaWJ1dGU6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvXFxAQGlkZW50aWZpZXIvLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdAYXR0cmlidXRlcyc6ICdrZXl3b3JkLmNvbnRyb2wnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BkZWZhdWx0JzogJydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgXSxcbiAgICAgICAgbGl0ZXJhbDogW1xuICAgICAgICAgICAgWy9cIi8sIHsgdG9rZW46ICdzdHJpbmcucXVvdGUnLCBuZXh0OiAnQHN0cmluZ2xpdCcgfV0sXG4gICAgICAgICAgICBbLzBbYl0oWzAxXV8/KSsvLCAnbnVtYmVyLmJpbmFyeSddLFxuICAgICAgICAgICAgWy8wW29dKFswLTddXz8pKy8sICdudW1iZXIub2N0YWwnXSxcbiAgICAgICAgICAgIFsvMFt4XShbMC05YS1mQS1GXV8/KSsoW3BQXVtcXC0rXShcXGRfPykrKT8vLCAnbnVtYmVyLmhleCddLFxuICAgICAgICAgICAgWy8oXFxkXz8pKlxcLihcXGRfPykrKFtlRV1bXFwtK10/KFxcZF8/KSspPy8sICdudW1iZXIuZmxvYXQnXSxcbiAgICAgICAgICAgIFsvKFxcZF8/KSsvLCAnbnVtYmVyJ11cbiAgICAgICAgXSxcbiAgICAgICAgc3RyaW5nbGl0OiBbXG4gICAgICAgICAgICBbL1xcXFxcXCgvLCB7IHRva2VuOiAnb3BlcmF0b3InLCBuZXh0OiAnQGludGVycG9sYXRlZGV4cHJlc3Npb24nIH1dLFxuICAgICAgICAgICAgWy9AZXNjYXBlcy8sICdzdHJpbmcnXSxcbiAgICAgICAgICAgIFsvXFxcXC4vLCAnc3RyaW5nLmVzY2FwZS5pbnZhbGlkJ10sXG4gICAgICAgICAgICBbL1wiLywgeyB0b2tlbjogJ3N0cmluZy5xdW90ZScsIG5leHQ6ICdAcG9wJyB9XSxcbiAgICAgICAgICAgIFsvLi8sICdzdHJpbmcnXVxuICAgICAgICBdLFxuICAgICAgICBpbnRlcnBvbGF0ZWRleHByZXNzaW9uOiBbXG4gICAgICAgICAgICBbL1xcKC8sIHsgdG9rZW46ICdvcGVyYXRvcicsIG5leHQ6ICdAaW50ZXJwb2xhdGVkZXhwcmVzc2lvbicgfV0sXG4gICAgICAgICAgICBbL1xcKS8sIHsgdG9rZW46ICdvcGVyYXRvcicsIG5leHQ6ICdAcG9wJyB9XSxcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BsaXRlcmFsJyB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQGtleXdvcmQnIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAc3ltYm9sJyB9XG4gICAgICAgIF0sXG4gICAgICAgIGtleXdvcmQ6IFtcbiAgICAgICAgICAgIFsvYC8sIHsgdG9rZW46ICdvcGVyYXRvcicsIG5leHQ6ICdAZXNjYXBlZGtleXdvcmQnIH1dLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC9AaWRlbnRpZmllci8sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0BrZXl3b3Jkcyc6ICdrZXl3b3JkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdbQS1aXVthLXpBLVowLTkkXSonOiAndHlwZS5pZGVudGlmaWVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICdpZGVudGlmaWVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICBdLFxuICAgICAgICBlc2NhcGVka2V5d29yZDogW1xuICAgICAgICAgICAgWy9gLywgeyB0b2tlbjogJ29wZXJhdG9yJywgbmV4dDogJ0Bwb3AnIH1dLFxuICAgICAgICAgICAgWy8uLywgJ2lkZW50aWZpZXInXVxuICAgICAgICBdLFxuICAgICAgICAvL1x0XHRzeW1ib2w6IFtcbiAgICAgICAgLy9cdFx0XHRbIC9Ac3ltYm9scy8sICdvcGVyYXRvcicgXSxcbiAgICAgICAgLy9cdFx0XHRbIC9Ab3BlcmF0b3JzLywgJ29wZXJhdG9yJyBdXG4gICAgICAgIC8vXHRcdF0sXG4gICAgICAgIGludm9rZWRtZXRob2Q6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvKFsuXSkoQGlkZW50aWZpZXIpLyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkMjogWydkZWxpbWV0ZXInLCAndHlwZS5pZGVudGlmaWVyJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICBdXG4gICAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/swift/swift.js\n");

/***/ })

}]);