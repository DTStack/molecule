import * as React from 'react';
import { PureComponent, ComponentProps } from 'react';
import { ISelectOption } from './option';
export interface ISelect extends ComponentProps<any> {
    value?: string;
    style?: React.CSSProperties;
    className?: string;
    defaultValue?: string;
    placeholder?: string;
    showArrow?: boolean;
    children?: ReactNode;
    onSelect?(e: React.MouseEvent, selectedOption?: ISelectOption): void;
}
declare type IState = {
    isOpen: boolean;
    option: ISelectOption;
};
export declare const selectClassName: string;
export declare class Select extends PureComponent<ISelect, IState> {
    private contextView;
    state: IState;
    private selectElm;
    private selectInput;
    constructor(props: any);
    componentDidMount(): void;
    getDefaultState(props: any): {
        option: {
            value?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            disabled?: boolean | undefined;
            ref?: string | ((instance: HTMLOptionElement | null) => void) | React.RefObject<HTMLOptionElement> | null | undefined;
            key?: string | number | null | undefined;
            label?: string | undefined;
            selected?: boolean | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            className?: string | undefined;
            contentEditable?: boolean | "inherit" | "true" | "false" | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: boolean | "true" | "false" | undefined;
            hidden?: boolean | undefined;
            id?: string | undefined;
            lang?: string | undefined;
            placeholder?: string | undefined;
            slot?: string | undefined;
            spellCheck?: boolean | "true" | "false" | undefined;
            style?: React.CSSProperties | undefined;
            tabIndex?: number | undefined;
            title?: string | undefined;
            translate?: "yes" | "no" | undefined;
            radioGroup?: string | undefined;
            role?: string | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            property?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            color?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: boolean | "true" | "false" | undefined;
            'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined;
            'aria-busy'?: boolean | "true" | "false" | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: boolean | "true" | "false" | undefined;
            'aria-dropeffect'?: "link" | "copy" | "none" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: boolean | "true" | "false" | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: boolean | "true" | "false" | undefined;
            'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | "grid" | undefined;
            'aria-hidden'?: boolean | "true" | "false" | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: boolean | "true" | "false" | undefined;
            'aria-multiline'?: boolean | "true" | "false" | undefined;
            'aria-multiselectable'?: boolean | "true" | "false" | undefined;
            'aria-orientation'?: "vertical" | "horizontal" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: boolean | "true" | "false" | undefined;
            'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: boolean | "true" | "false" | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: boolean | "true" | "false" | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            children?: React.ReactNode;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            onCopy?: ((event: React.ClipboardEvent<HTMLOptionElement>) => void) | undefined;
            onCopyCapture?: ((event: React.ClipboardEvent<HTMLOptionElement>) => void) | undefined;
            onCut?: ((event: React.ClipboardEvent<HTMLOptionElement>) => void) | undefined;
            onCutCapture?: ((event: React.ClipboardEvent<HTMLOptionElement>) => void) | undefined;
            onPaste?: ((event: React.ClipboardEvent<HTMLOptionElement>) => void) | undefined;
            onPasteCapture?: ((event: React.ClipboardEvent<HTMLOptionElement>) => void) | undefined;
            onCompositionEnd?: ((event: React.CompositionEvent<HTMLOptionElement>) => void) | undefined;
            onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLOptionElement>) => void) | undefined;
            onCompositionStart?: ((event: React.CompositionEvent<HTMLOptionElement>) => void) | undefined;
            onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLOptionElement>) => void) | undefined;
            onCompositionUpdate?: ((event: React.CompositionEvent<HTMLOptionElement>) => void) | undefined;
            onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLOptionElement>) => void) | undefined;
            onFocus?: ((event: React.FocusEvent<HTMLOptionElement>) => void) | undefined;
            onFocusCapture?: ((event: React.FocusEvent<HTMLOptionElement>) => void) | undefined;
            onBlur?: ((event: React.FocusEvent<HTMLOptionElement>) => void) | undefined;
            onBlurCapture?: ((event: React.FocusEvent<HTMLOptionElement>) => void) | undefined;
            onChange?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onChangeCapture?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onBeforeInput?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onBeforeInputCapture?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onInput?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onInputCapture?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onReset?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onResetCapture?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onSubmit?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onSubmitCapture?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onInvalid?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onInvalidCapture?: ((event: React.FormEvent<HTMLOptionElement>) => void) | undefined;
            onLoad?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onLoadCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onError?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onErrorCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onKeyDown?: ((event: React.KeyboardEvent<HTMLOptionElement>) => void) | undefined;
            onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLOptionElement>) => void) | undefined;
            onKeyPress?: ((event: React.KeyboardEvent<HTMLOptionElement>) => void) | undefined;
            onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLOptionElement>) => void) | undefined;
            onKeyUp?: ((event: React.KeyboardEvent<HTMLOptionElement>) => void) | undefined;
            onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLOptionElement>) => void) | undefined;
            onAbort?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onAbortCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onCanPlay?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onDurationChange?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onEmptied?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onEncrypted?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onEnded?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onEndedCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onLoadedData?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onLoadStart?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onPause?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onPauseCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onPlay?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onPlayCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onPlaying?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onPlayingCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onProgress?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onProgressCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onRateChange?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onSeeked?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onSeekedCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onSeeking?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onSeekingCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onStalled?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onStalledCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onSuspend?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onSuspendCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onTimeUpdate?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onVolumeChange?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onWaiting?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onWaitingCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onAuxClick?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onAuxClickCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onClick?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onClickCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onContextMenu?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onContextMenuCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onDoubleClick?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onDoubleClickCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onDrag?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragEnd?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragEndCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragEnter?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragEnterCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragExit?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragExitCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragLeave?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragLeaveCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragOver?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragOverCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragStart?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDragStartCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDrop?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onDropCapture?: ((event: React.DragEvent<HTMLOptionElement>) => void) | undefined;
            onMouseDown?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseDownCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseEnter?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseLeave?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseMove?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseMoveCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseOut?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseOutCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseOver?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseOverCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseUp?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onMouseUpCapture?: ((event: React.MouseEvent<HTMLOptionElement, MouseEvent>) => void) | undefined;
            onSelect?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onSelectCapture?: ((event: React.SyntheticEvent<HTMLOptionElement, Event>) => void) | undefined;
            onTouchCancel?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onTouchCancelCapture?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onTouchEnd?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onTouchEndCapture?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onTouchMove?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onTouchMoveCapture?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onTouchStart?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onTouchStartCapture?: ((event: React.TouchEvent<HTMLOptionElement>) => void) | undefined;
            onPointerDown?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerDownCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerMove?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerMoveCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerUp?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerUpCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerCancel?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerCancelCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerEnter?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerEnterCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerLeave?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerOver?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerOverCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerOut?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onPointerOutCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onGotPointerCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onLostPointerCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLOptionElement>) => void) | undefined;
            onScroll?: ((event: React.UIEvent<HTMLOptionElement, UIEvent>) => void) | undefined;
            onScrollCapture?: ((event: React.UIEvent<HTMLOptionElement, UIEvent>) => void) | undefined;
            onWheel?: ((event: React.WheelEvent<HTMLOptionElement>) => void) | undefined;
            onWheelCapture?: ((event: React.WheelEvent<HTMLOptionElement>) => void) | undefined;
            onAnimationStart?: ((event: React.AnimationEvent<HTMLOptionElement>) => void) | undefined;
            onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLOptionElement>) => void) | undefined;
            onAnimationEnd?: ((event: React.AnimationEvent<HTMLOptionElement>) => void) | undefined;
            onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLOptionElement>) => void) | undefined;
            onAnimationIteration?: ((event: React.AnimationEvent<HTMLOptionElement>) => void) | undefined;
            onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLOptionElement>) => void) | undefined;
            onTransitionEnd?: ((event: React.TransitionEvent<HTMLOptionElement>) => void) | undefined;
            onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLOptionElement>) => void) | undefined;
            css?: import("@emotion/core").InterpolationWithTheme<any>;
        };
        isOpen: boolean;
    };
    handleOnClickOption: (e: React.MouseEvent) => void;
    handleOnHoverOption: (e: React.MouseEvent) => void;
    handleOnClickSelect: (e: React.MouseEvent) => void;
    render(): JSX.Element;
}
export {};
